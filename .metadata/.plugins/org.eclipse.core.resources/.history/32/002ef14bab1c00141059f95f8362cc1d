package Game;

import javax.swing.JFrame;
import javax.swing.JPanel;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;

import javax.swing.Timer;


public class Board extends JPanel implements ActionListener {	
	private Snake s;
	private Board b;

	private int x1;
	private int x2;
	private int y1;
	private int y2;

	private boolean upPressed = false;
	private boolean downPressed = false;
	private boolean rightPressed = false;
	private boolean leftPressed = false;


	public Board (Snake snake){
		s = snake;

		// call moveSnake() 5 fps
		Timer timer = new Timer(1000/5, this);
		timer.start();
	}

	public void actionPerformed (ActionEvent e) {
		moveSnake();
	}

	public void openWindow (JFrame f) {
		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		f.setSize(350, 350);
		b = new Board (s);
		f.add(b);
		f.setVisible(true);
	}

	@Override
	public void paintComponent (Graphics g) {
		super.paintComponent(g);
		Graphics2D g2d = (Graphics2D) g;
		//		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
		//				RenderingHints.VALUE_ANTIALIAS_ON);

		// draw board
		g2d.setColor(Color.black);
		g2d.drawRect(30, 15, 250, 250);

		// draw snake		
		g2d.drawLine(x1, y1, x2, y2);


	}

	public void moveSnake() {
		// get positions and size
		x1 = s.getX();
		y1 = s.getY();		
		x2 = x1;
		y2 = y1 + s.getSize();		

		repaint();
		
		// check key pressed
		switch(s.getDir()) {		
		case "up": 
			s.setY(-1);
			break;
		case "down":
			s.setY(1);
			break;
		case "left":
			s.setX(-1);
			break;
		case "right":
			s.setX(1);
			break;
			default:
				;
		}

		

	}


	public void keyPressed (KeyEvent e) {

		switch (e.getKeyCode()) {
		case KeyEvent.VK_UP: 
			upPressed = true;
			break;
		case KeyEvent.VK_DOWN :
			downPressed = true;
			break;
		case KeyEvent.VK_LEFT:
			leftPressed = true;
			break;
		case KeyEvent.VK_RIGHT:
			rightPressed = true;
			break;
		default: break;
		}

	}

	public void keyReleased(KeyEvent e){

		switch (e.getKeyCode()) {
		case KeyEvent.VK_UP: 
			upPressed = false;
			break;
		case KeyEvent.VK_DOWN :
			downPressed = false;
			break;
		case KeyEvent.VK_LEFT:
			leftPressed = false;
			break;
		case KeyEvent.VK_RIGHT:
			rightPressed = false;
			break;
		default: break;
		}

	}


}
